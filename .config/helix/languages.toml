[[language]]
name = "julia"
scope = "source.julia"
injection-regex = "julia"
file-types = ["jl"]
roots = ["Project.toml", "Manifest.toml", "JuliaProject.toml"]
comment-token = "#"
language-servers = ["julia-lsp"]
indent = { tab-width = 4, unit = "    " }
language-id = "julia"
auto-format = false

[language-server.julia-lsp]
command = "julia"
args = [
  "--startup-file=no",
  "--history-file=no",
  "-e",
  """
  using LanguageServer, SymbolServer;
  import Pkg;
  env_path = dirname(Pkg.Types.Context().env.project_file);
  depot_path = get(ENV, "JULIA_DEPOT_PATH", "");
  server = LanguageServer.LanguageServerInstance(stdin, stdout, env_path, depot_path, nothing, "");
  run(server);
  """
]

[[language]]
name = "c"
# auto-format = true
formatter = { command = "clang-format" }

[[language]]
name = "cpp"
auto-format = true
formatter = { command = "clang-format" }

[language-server]
clangd = { command = "clangd", args = [ "--clang-tidy" ] }

[[language]]
name = "rust"
formatter = { command = "rustfmt" }

[language-server.rust-analyzer.config]
check = {command = "clippy", extraArgs = ["--", "-W", "clippy::unwrap_used", "-W", "clippy::expect_used", "-W", "clippy::pedantic", "-W", "clippy::nursery"]}


[[language]]
name = "markdown"
scope = "source.md"
injection-regex = "md|markdown"
file-types = ["qmd", "md", "livemd", "markdown", "mdx", "mkd", "mkdn", "mdwn", "mdown", "markdn", "mdtxt", "mdtext", "workbook", { glob = "PULLREQ_EDITMSG" }]
roots = [".marksman.toml"]
language-servers = [ "marksman", "markdown-oxide" ]
indent = { tab-width = 2, unit = "  " }
block-comment-tokens = { start = "<!--", end = "-->" }
